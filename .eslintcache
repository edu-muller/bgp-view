[{"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\index.js":"1","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\App.js":"2","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\reportWebVitals.js":"3","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ReactTable.js":"4","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ResourceView.js":"5"},{"size":203,"mtime":1618283833006,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3498,"mtime":1619134408063,"results":"10","hashOfConfig":"7"},{"size":9935,"mtime":1619742330537,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"847uul",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\index.js",[],["25","26"],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\App.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\reportWebVitals.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ReactTable.js",[],["27","28"],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ResourceView.js",["29"],"import React from \"react\";\nimport { format as dateFormat } from \"date-fns\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsMap from \"highcharts/modules/map\";\nimport HighchartsMarkerClusters from \"highcharts/modules/marker-clusters\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { TextField, Button, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { KeyboardDateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\nimport ReactTable from \"./ReactTable\";\n\nHighchartsMap(Highcharts);\nHighchartsMarkerClusters(Highcharts);\n\nconst worldSerie = {\n\tname: 'World',\n\tborderColor: '#707070',\n\tnullColor: 'rgba(200, 200, 200, 0.3)',\n\tshowInLegend: false,\n}\n\nconst useStyles = makeStyles((theme) => ({\n\tform: {\n\t\t'&': {\n\t\t\tpadding: '20px', \n\t\t\ttextAlign: 'center',\n\t\t},\n\t\t'& > *': {\n\t\t\tverticalAlign: 'middle',\n\t\t},\n\t\t'& .MuiTextField-root': {\n\t\t\tmargin: theme.spacing(1),\n\t\t\twidth: '25ch',\n\t\t},\n\t\t'& *:focus': {\n\t\t\toutline: 'unset',\n\t\t},\n\t},\n\tdisplayOptions: {\n\t\t'&': {\n\t\t\ttextAlign: 'center',\n\t\t},\n\t}\n}));\n\nexport default function ResourceView() {\n\t\n\tconst urlApi = 'https://bgp-report.herokuapp.com/api';\n\tconst classes = useStyles();\n\tconst [inputResource, setInputResource] = React.useState('');\n\tconst [appliedResource, setAppliedResource] = React.useState('');\n\tconst [inputCollector, setInputCollector] = React.useState('');\n\tconst [appliedCollector, setAppliedCollector] = React.useState('');\n\tconst [inputTimestamp, setInputTimestamp] = React.useState(null);\n\tconst [displayLabels] = React.useState(false);\n\tconst [clusterPoints, setClusterPoints] = React.useState(false);\n\tconst [routes, setRoutes] = React.useState(null);\n\tconst [availableCollectors, setAvailableCollectors] = React.useState(null);\n\tconst [inputLive, setInputLive] = React.useState(true);\n\tconst [options, setOptions] = React.useState({\n\t\tchart: {\n\t\t\tmap: world,\n\t\t\theight: 700,\n\t\t\tshadow: true,\n\t\t\tanimation: false,\n\t\t},\n\t\t\n\t\ttitle: {\n\t\t\ttext: \"World Map\"\n\t\t},\n\t\t\n\t\tsubtitle: {\n\t\t\ttext: '-',\n\t\t},\n\t\t\n\t\tlegend: {\n\t\t\talign: 'left',\n\t\t\tlayout: 'vertical',\n\t\t\tfloating: true,\n\t\t},\n\t\t\n\t\tmapNavigation: {\n\t\t\tenabled: true,\n\t\t},\n\t\t\n\t\ttooltip: {\n\t\t\tanimation: false,\n\t\t\thideDelay: 0,\n\t\t\tpointFormat: `{point.name} - {point.geographical} ({point.countryCode})<br>Lat: {point.lat} Lon: {point.lon}`,\n\t\t},\n\t\t\n\t\tplotOptions: {\n\t\t\tmappoint: {\n\t\t\t\tstickyTracking: false,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tformat: displayLabels ? '{point.id}' : '',\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\tmarker: {\n\t\t\t\t\tsymbol: 'circle',\n\t\t\t\t},\n\t\t\t\tcluster: {\n\t\t\t\t\tenabled: clusterPoints,\n\t\t\t\t\tallowOverlap: false,\n\t\t\t\t\tanimation: {\n\t\t\t\t\t\tduration: 50,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\n\t\tcolors: ['BLACK', 'GREEN', 'BLUE', 'RED'],\n\t\t\n\t\tseries: [ worldSerie ],\n\t});\n\tconst inputLiveRef = React.useRef(inputLive);\n\tconst liveUpdateRef = React.useRef(null);\n\t\n\tReact.useEffect(() => {\n\t\tinputLiveRef.current = inputLive;\n\t\tif (inputLiveRef.current) updateResources({ collectorFilter: appliedCollector, resourceFilter: appliedResource, liveFilter: true, collectors: availableCollectors });\n\t}, [inputLive]);\n\t\n\tconst columns = [\n\t\t{\n\t\t\tHeader: \"Collector\",\n\t\t\taccessor: \"collector\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Path\",\n\t\t\taccessor: \"path\",\n\t\t\tfilter: \"integerArray\",\n\t\t\tCell: cellInfo => <PathSpan values={cellInfo.value} rowData={cellInfo.row.original} />,\n\t\t},\n\t\t{\n\t\t\tHeader: \"Path Length\",\n\t\t\taccessor: \"path.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Communities\",\n\t\t\taccessor: \"community\",\n\t\t\tfilter: \"stringMatchArray\",\n\t\t\tCell: ({ cell: { value } }) => <CommunitySpan values={value} />,\n\t\t},\n\t\t{\n\t\t\tHeader: \"Origin Prepends\",\n\t\t\taccessor: \"originPrepends.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Total Prepends\",\n\t\t\taccessor: \"prepends.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Poisoned Routes\",\n\t\t\taccessor: \"poisonedRoutes.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t];\n\t\n\tconst updateSeries = ({ resource, collector, timestamp, visibles, invisibles, prependeds } = {}) => {\n\t\tsetOptions({\n\t\t\tsubtitle: {\n\t\t\t\ttext: [\n\t\t\t\t\t...(resource) ? [`<b>Resource</b>: ${resource}`] : [],\n\t\t\t\t\t...(collector) ? [`<b>Collector</b>: ${collector}`] : [],\n\t\t\t\t\t...(timestamp) ? [`<b>Timestamp</b>: ${dateFormat(timestamp, 'yyyy-MM-dd HH:mm')}`] : [],\n\t\t\t\t].join(' | ') || '-',\n\t\t\t},\n\t\t\tseries: [ worldSerie, \n\t\t\t\t{\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tname: `Visible (${visibles ? visibles.length : 'loading...'})`,\n\t\t\t\t\tdata: visibles ?? [],\n\t\t\t\t}, {\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tname: `Visible only Prepended (${prependeds ? prependeds.length : 'loading...'})`,\n\t\t\t\t\tdata: prependeds ?? [],\n\t\t\t\t}, {\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tname: `Not Visible (${invisibles ? invisibles.length : 'loading...'})`,\n\t\t\t\t\tdata: invisibles ?? [],\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\t\n\tconst search = (event) => {\n\t\tevent.preventDefault();\n\t\tif (!inputResource) return;\n\t\tif (liveUpdateRef.current) clearTimeout(liveUpdateRef.current);\n\t\tlet resourceFilter = inputResource, collectorFilter = inputCollector, timestampFilter = inputTimestamp, liveFilter = inputLiveRef.current;\n\t\tsetAppliedResource(resourceFilter);\n\t\tsetAppliedCollector(collectorFilter);\n\t\tsetRoutes(undefined);\n\t\tupdateSeries();\n\t\tif (timestampFilter) {\n\t\t\tliveFilter = false;\n\t\t\tsetInputLive(false);\n\t\t}\n\t\t\n\t\tfetch(`${urlApi}/collectors`).then(res => res.json()).then(collectors => {\n\t\t\tsetAvailableCollectors(collectors);\n\t\t\tupdateResources({ collectorFilter, timestampFilter, resourceFilter, liveFilter, collectors });\n\t\t});\n\t}\n\t\n\tconst updateResources = ({ collectorFilter, timestampFilter, resourceFilter, liveFilter, collectors }) => {\n\t\tif (!collectors?.length) return;\n\t\tfetch(`${urlApi}/resources?resources=${resourceFilter}\n\t\t\t\t${(collectorFilter) ? `&collectors=${collectorFilter}` : ''}\n\t\t\t\t${(timestampFilter) ? `&timestamp=${timestampFilter.getTime()}` : ''}\n\t\t\t\t${(liveFilter) ? `&live=${liveFilter}` : ''}`\n\t\t\t\t).then(res => res.json()).then(data => {\n\t\t\tprocess(collectors, data, { resource: resourceFilter, collector: collectorFilter });\n\t\t\t\n\t\t\tif (inputLiveRef.current) {\n\t\t\t\tliveUpdateRef.current = setTimeout(() => {\n\t\t\t\t\tif (inputLiveRef.current) updateResources({ collectorFilter, resourceFilter, liveFilter: true, collectors });\n\t\t\t\t}, 5000);\n\t\t\t}\n\t\t});\n\t}\n\t\n\tconst process = (collectors, resources, { resource, collector} = {}) => {\n\t\tlet visibles = [], invisibles = [], prependeds = [];\n\t\tresources.routes.forEach(r => {\n\t\t\tr.prepends = [];\n\t\t\tr.originPrepends = [];\n\t\t\tr.poisonPrepends = [];\n\t\t\tr.poisonedRoutes = [];\n\t\t\tlet origin = r.path[r.path.length - 1];\n\t\t\tfor (let i = r.path.length - 1; i >= 0; i--) {\n\t\t\t\tlet current = r.path[i];\n\t\t\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\t\t\tif (r.path[j] === current) {\n\t\t\t\t\t\tif (current === origin) r.originPrepends.push(current);\n\t\t\t\t\t\tif (j < i - 1) {\n\t\t\t\t\t\t\tr.poisonPrepends.push(current);\n\t\t\t\t\t\t\tr.poisonedRoutes.push(...r.path.slice(j + 1, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.prepends.push(current);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tcollectors.forEach(c => {\n\t\t\tif (collector && !collector.split(',').includes(`${c.id}`)) return;\n\t\t\tlet v = resources.routes.filter(r => r.collector === c.id);\n\t\t\t(!v.length ? invisibles : v.some(r => !r.originPrepends.length) ? visibles : prependeds).push(\n\t\t\t\t{\n\t\t\t\t\tid: c.id,\n\t\t\t\t\tname: c.name,\n\t\t\t\t\tgeographical: c.location.geographical,\n\t\t\t\t\ttopological: c.location.topological,\n\t\t\t\t\tcountryCode: c.location.countryCode,\n\t\t\t\t\tlat: c.location.latitude,\n\t\t\t\t\tlon: c.location.longitude,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tsetRoutes(resources.routes);\n\t\tupdateSeries({ visibles, invisibles, prependeds, resource, collector, timestamp: new Date(resources.queriedAt) });\n\t}\n\t\n\tconst onChangeClusterPoints = (event) => {\n\t\tsetClusterPoints(event.target.checked);\n\t\tsetOptions({\n\t\t\tplotOptions: {\n\t\t\t\tmappoint: {\n\t\t\t\t\tcluster: {\n\t\t\t\t\t\tenabled: event.target.checked,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\tconst PathSpan = ({ values, rowData }) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{values.map((tag, idx) => {\n\t\t\t\t\tlet className = [\n\t\t\t\t\t\t\"tag\",\n\t\t\t\t\t\t\"path\",\n\t\t\t\t\t\t...(rowData.prepends.includes(tag)) ? [\"prepend\"] : [],\n\t\t\t\t\t\t...(rowData.originPrepends.includes(tag)) ? [\"origin-prepend\"] : [],\n\t\t\t\t\t\t...(rowData.poisonPrepends.includes(tag)) ? [\"poisoner\"] : [],\n\t\t\t\t\t\t...(rowData.poisonedRoutes.includes(tag)) ? [\"poisoned\"] : [],\n\t\t\t\t\t]\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span key={idx} className={className.join(\" \")}>\n\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t};\n\t\n\tconst CommunitySpan = ({ values }) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{values.map((tag, idx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span key={idx} className={\"tag community\"}>\n\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t};\n\t\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<form onSubmit={search} className={classes.form}>\n\t\t\t\t\t<TextField id=\"resource\" label=\"Resource\" value={inputResource} onChange={e => setInputResource(e.target.value)} />\n\t\t\t\t\t<TextField id=\"collector\" label=\"Collector\" value={inputCollector} onChange={e => setInputCollector(e.target.value)} />\n\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\n\t\t\t\t\t\t<KeyboardDateTimePicker id=\"timestamp\" label=\"Timestamp\" value={inputTimestamp} clearable showTodayButton \n\t\t\t\t\t\t\t\tampm={false} format=\"yyyy-MM-dd HH:mm\" onChange={setInputTimestamp} />\n\t\t\t\t\t</MuiPickersUtilsProvider>\n\t\t\t\t\t<Button type=\"submit\" variant=\"contained\">Search</Button>\n\t\t\t\t</form>\n\t\t\t\t<div className={classes.displayOptions}>\n\t\t\t\t\t<FormControlLabel label=\"Cluster Points\" control={<Checkbox checked={clusterPoints} onChange={onChangeClusterPoints} />} />\n\t\t\t\t\t<FormControlLabel label=\"Live\" control={<Checkbox checked={inputLive} onChange={e => setInputLive(e.target.checked)} />} />\n\t\t\t\t</div>\n\t\t\t\t<HighchartsReact highcharts={Highcharts} options={options} constructorType={\"mapChart\"} />\n\t\t\t\t<ReactTable data={routes ?? []} columns={columns} />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"30","replacedBy":"34"},{"ruleId":"32","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":127,"column":5,"nodeType":"38","endLine":127,"endColumn":16,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],["40"],["41"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'appliedCollector', 'appliedResource', 'availableCollectors', and 'updateResources'. Either include them or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [appliedCollector, appliedResource, availableCollectors, inputLive, updateResources]",{"range":"45","text":"46"},[3231,3242],"[appliedCollector, appliedResource, availableCollectors, inputLive, updateResources]"]