[{"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\index.js":"1","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\App.js":"2","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\reportWebVitals.js":"3","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\maps\\world.js":"4","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ReactTable.js":"5","D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ResourceView.js":"6"},{"size":203,"mtime":1618283833006,"results":"7","hashOfConfig":"8"},{"size":528,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":217761,"mtime":1612223001823,"results":"11","hashOfConfig":"8"},{"size":4017,"mtime":1618529663433,"results":"12","hashOfConfig":"8"},{"size":7992,"mtime":1618526704021,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"847uul",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\index.js",[],["28","29"],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\App.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\reportWebVitals.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\maps\\world.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ReactTable.js",[],"D:\\UPF\\TCC\\Desenvolvimento\\bgp-view\\src\\components\\ResourceView.js",["30"],"import React from \"react\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsMap from \"highcharts/modules/map\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { TextField, Button } from '@material-ui/core';\nimport { KeyboardDateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { makeStyles } from '@material-ui/core/styles';\n\n//import mapData from \"@highcharts/map-collection/custom/world.geo.json\";\nimport mapData from \"../maps/world\";\nimport ReactTable from \"./ReactTable\";\n\nHighchartsMap(Highcharts);\n\nconst mapSerie = {\n\tname: 'World',\n\tmapData: mapData,\n\tborderColor: '#707070',\n\tnullColor: 'rgba(200, 200, 200, 0.3)',\n\tshowInLegend: false,\n}\n\nconst useStyles = makeStyles((theme) => ({\n\tform: {\n\t\t'& > *': {\n\t\t\tverticalAlign: 'middle',\n\t\t},\n\t\t'& .MuiTextField-root': {\n\t\t\tmargin: theme.spacing(1),\n\t\t\twidth: '25ch',\n\t\t},\n\t\t'& *:focus': {\n\t\t\toutline: 'unset',\n\t\t}\n\t},\n}));\n\nexport default function ResourceView() {\n\t\n\tconst urlApi = 'https://bgp-report.herokuapp.com/api';\n\tconst classes = useStyles();\n\tconst [resource, setResource] = React.useState('');\n\tconst [appliedResource, setAppliedResource] = React.useState('');\n\tconst [collector, setCollector] = React.useState('');\n\tconst [appliedCollector, setAppliedCollector] = React.useState('');\n\tconst [timestamp, setTimestamp] = React.useState(null);\n\tconst [appliedTimestamp, setAppliedTimestamp] = React.useState(null);\n\tconst [displayLabels, setDisplayLabels] = React.useState(false);\n\tconst [routes, setRoutes] = React.useState(null);\n\t// const [visibles, setVisibles] = React.useState(null);\n\t// const [invisibles, setInvisibles] = React.useState(null);\n\t// const [prependeds, setPrependeds] = React.useState(null);\n\t\n\tconst [options, setOptions] = React.useState({\n\t\tchart: {\n\t\t\theight: 700\n\t\t},\n\t\t\n\t\ttitle: {\n\t\t\ttext: \"World Map\"\n\t\t},\n\t\t\n\t\tsubtitle: {\n\t\t\ttext: [\n\t\t\t\t...(appliedResource) ? [`Resource: ${appliedResource}`] : [],\n\t\t\t\t...(appliedCollector) ? [`Collector: ${appliedCollector}`] : [],\n\t\t\t\t...(appliedTimestamp) ? [`Timestamp: ${appliedTimestamp}`] : [],\n\t\t\t].join(' | ') || '-',\n\t\t},\n\t\t\n\t\tlegend: {\n\t\t\talign: 'left',\n\t\t\tlayout: 'vertical',\n\t\t\tfloating: true,\n\t\t},\n\t\t\n\t\tmapNavigation: {\n\t\t\tenabled: true,\n\t\t},\n\t\t\n\t\ttooltip: {\n\t\t\tanimation: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn `${this.point.name} - ${this.point.geographical} (${this.point.countryCode})` + (\n\t\t\t\t\tthis.point.lat ? '<br>Lat: ' + this.point.lat + ' Lon: ' + this.point.lon : '');\n\t\t\t}\n\t\t},\n\t\t\n\t\tseries: [ mapSerie ],\n\t});\n\t\n\tconst columns = [\n\t\t{\n\t\t\tHeader: \"Collector\",\n\t\t\taccessor: \"collector\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Path\",\n\t\t\taccessor: \"path\",\n\t\t\tfilter: \"integerArray\",\n\t\t\tCell: cellInfo => <PathSpan values={cellInfo.value} rowData={cellInfo.row.original} />,\n\t\t},\n\t\t{\n\t\t\tHeader: \"Path Length\",\n\t\t\taccessor: \"path.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Communities\",\n\t\t\taccessor: \"community\",\n\t\t\tfilter: \"stringMatchArray\",\n\t\t\tCell: ({ cell: { value } }) => <CommunitySpan values={value} />,\n\t\t},\n\t\t{\n\t\t\tHeader: \"Origin Prepends\",\n\t\t\taccessor: \"originPrepends.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Poisoned Routes\",\n\t\t\taccessor: \"poisonedRoutes.length\",\n\t\t\tfilter: \"integer\",\n\t\t},\n\t\t{\n\t\t\tHeader: \"Total Prepends\",\n\t\t\taccessor: \"prepends.length\",\n\t\t\tfilter: \"integer\",\n\t\t}\n\t];\n\t\n\tconst updateSeries = ({ visibles, invisibles, prependeds } = {}) => {\n\t\tsetOptions({\n\t\t\tseries: [ mapSerie\n\t\t\t\t, {\n\t\t\t\t\tname: `Visível (${visibles?.length ?? 0})`,\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tfillColor: 'GREEN',\n\t\t\t\t\t\tsymbol: 'circle',\n\t\t\t\t\t},\n\t\t\t\t\tdataLabels: {\n\t\t\t\t\t\tformat: '{point.id}',\n\t\t\t\t\t\tenabled: displayLabels,\n\t\t\t\t\t},\n\t\t\t\t\tdata: visibles,\n\t\t\t\t}, {\n\t\t\t\t\tname: `Visível com Prepend (${prependeds?.length ?? 0})`,\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tfillColor: 'BLUE',\n\t\t\t\t\t\tsymbol: 'circle',\n\t\t\t\t\t},\n\t\t\t\t\tdataLabels: {\n\t\t\t\t\t\tformat: '{point.id}',\n\t\t\t\t\t\tenabled: displayLabels,\n\t\t\t\t\t},\n\t\t\t\t\tdata: prependeds,\n\t\t\t\t}, {\n\t\t\t\t\tname: `Não Visível (${invisibles?.length ?? 0})`,\n\t\t\t\t\ttype: 'mappoint',\n\t\t\t\t\tmarker: {\n\t\t\t\t\t\tfillColor: 'RED',\n\t\t\t\t\t\tsymbol: 'circle',\n\t\t\t\t\t},\n\t\t\t\t\tdataLabels: {\n\t\t\t\t\t\tformat: '{point.id}',\n\t\t\t\t\t\tenabled: displayLabels,\n\t\t\t\t\t},\n\t\t\t\t\tdata: invisibles,\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\t\n\tconst search = (event) => {\n\t\tevent.preventDefault();\n\t\tif (!resource) return;\n\t\tlet applied = resource;//-= REVER como corrigir.\n\t\tsetAppliedResource(resource);\n\t\tsetAppliedCollector(collector);\n\t\tsetAppliedTimestamp(timestamp);\n\t\tsetRoutes(undefined);\n\t\tupdateSeries();\n\t\t\n\t\tfetch(`${urlApi}/collectors`).then(res => res.json()).then(collectors => {\n\t\t\tif (!collectors?.length) return;\n\t\t\tlet collectorFilter = (collector) ? `&collectors=${collector}` : '';\n\t\t\tlet timestampFilter = (timestamp) ? `&timestamp=${timestamp.getTime()}` : '';\n\t\t\tfetch(`${urlApi}/resources?resources=${applied}${collectorFilter}${timestampFilter}`).then(res => res.json()).then(data => {\n\t\t\t\tprocess(collectors, data);\n\t\t\t});\n\t\t});\n\t}\n\t\n\tconst process = (collectors, resources) => {\n\t\tlet visibles = [], invisibles = [], prependeds = [];\n\t\tresources.routes.forEach(r => {\n\t\t\tr.prepends = [];\n\t\t\tr.originPrepends = [];\n\t\t\tr.poisonPrepends = [];\n\t\t\tr.poisonedRoutes = [];\n\t\t\tlet origin = r.path[r.path.length - 1];\n\t\t\tfor (let i = r.path.length - 1; i >= 0; i--) {\n\t\t\t\tlet current = r.path[i];\n\t\t\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\t\t\tif (r.path[j] === current) {\n\t\t\t\t\t\tif (current === origin) r.originPrepends.push(current);\n\t\t\t\t\t\tif (j < i - 1) {\n\t\t\t\t\t\t\tr.poisonPrepends.push(current);\n\t\t\t\t\t\t\tr.poisonedRoutes.concat(r.path.slice(j, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.prepends.push(current);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tcollectors.forEach(c => {\n\t\t\tif (appliedCollector && !appliedCollector.split(',').includes(`${c.id}`)) return;\n\t\t\tlet v = resources.routes.filter(r => r.collector === c.id);\n\t\t\t(!v.length ? invisibles : v.some(r => !r.originPrepends.length) ? visibles : prependeds).push(\n\t\t\t\t{\n\t\t\t\t\tid: c.id,\n\t\t\t\t\tname: c.name,\n\t\t\t\t\tgeographical: c.location.geographical,\n\t\t\t\t\ttopological: c.location.topological,\n\t\t\t\t\tcountryCode: c.location.countryCode,\n\t\t\t\t\tlat: c.location.latitude,\n\t\t\t\t\tlon: c.location.longitude,\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tsetRoutes(resources.routes);\n\t\tupdateSeries({ visibles, invisibles, prependeds });\n\t}\n\t\n\tconst PathSpan = ({ values, rowData }) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{values.map((tag, idx) => {\n\t\t\t\t\tlet className = [\n\t\t\t\t\t\t\"tag\",\n\t\t\t\t\t\t\"path\",\n\t\t\t\t\t\t...(rowData.prepends.includes(tag)) ? [\"prepend\"] : [],\n\t\t\t\t\t\t...(rowData.originPrepends.includes(tag)) ? [\"origin-prepend\"] : [],\n\t\t\t\t\t\t...(rowData.poisonPrepends.includes(tag)) ? [\"poisoner\"] : [],\n\t\t\t\t\t\t...(rowData.poisonedRoutes.includes(tag)) ? [\"poisoned\"] : [],\n\t\t\t\t\t]\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span key={idx} className={className.join(\" \")}>\n\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t};\n\t\n\tconst CommunitySpan = ({ values }) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{values.map((tag, idx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<span key={idx} className={\"tag community\"}>\n\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t};\n\t\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div>\n\t\t\t\t<form onSubmit={search} className={classes.form} style={{padding: '20px', textAlign: 'center'}} >\n\t\t\t\t\t<TextField id=\"resource\" label=\"Resource\" value={resource} onChange={e => setResource(e.target.value)} />\n\t\t\t\t\t<TextField id=\"collector\" label=\"Collector\" value={collector} onChange={e => setCollector(e.target.value)} />\n\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\n\t\t\t\t\t\t<KeyboardDateTimePicker id=\"timestamp\" label=\"Timestamp\" value={timestamp} clearable showTodayButton \n\t\t\t\t\t\t\t\tampm={false} format=\"dd/MM/yyyy HH:mm\" onChange={setTimestamp} />\n\t\t\t\t\t</MuiPickersUtilsProvider>\n\t\t\t\t\t<Button type=\"submit\" variant=\"contained\">Search</Button>\n\t\t\t\t</form>\n\t\t\t\t<HighchartsReact highcharts={Highcharts} options={options} constructorType={\"mapChart\"} />\n\t\t\t\t<ReactTable data={routes ?? []} columns={columns} />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":51,"column":24,"nodeType":"37","messageId":"38","endLine":51,"endColumn":40},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'setDisplayLabels' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]